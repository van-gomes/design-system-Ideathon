import { page, server } from '@vitest/browser/context';
import { g as getByTitleSelector, a as getByTextSelector, b as getByPlaceholderSelector, c as getByAltTextSelector, d as getByTestIdSelector, e as getByRoleSelector, f as getByLabelSelector } from '../public-utils-J4vwTaki.js';
import { s as selectorEngine, L as Locator, g as getBrowserState } from '../index-DrTP5i7N.js';
import { p as processTimeoutOptions, g as getIframeScale } from '../utils-VCysLhWp.js';
import 'vitest/utils';

page.extend({
  getByLabelText(text, options) {
    return new PlaywrightLocator(getByLabelSelector(text, options));
  },
  getByRole(role, options) {
    return new PlaywrightLocator(getByRoleSelector(role, options));
  },
  getByTestId(testId) {
    return new PlaywrightLocator(getByTestIdSelector(server.config.browser.locators.testIdAttribute, testId));
  },
  getByAltText(text, options) {
    return new PlaywrightLocator(getByAltTextSelector(text, options));
  },
  getByPlaceholder(text, options) {
    return new PlaywrightLocator(getByPlaceholderSelector(text, options));
  },
  getByText(text, options) {
    return new PlaywrightLocator(getByTextSelector(text, options));
  },
  getByTitle(title, options) {
    return new PlaywrightLocator(getByTitleSelector(title, options));
  },
  elementLocator(element) {
    return new PlaywrightLocator(
      selectorEngine.generateSelectorSimple(element),
      element
    );
  }
});
class PlaywrightLocator extends Locator {
  constructor(selector, _container) {
    super();
    this.selector = selector;
    this._container = _container;
  }
  click(options) {
    return super.click(processTimeoutOptions(processClickOptions(options)));
  }
  dblClick(options) {
    return super.dblClick(processTimeoutOptions(processClickOptions(options)));
  }
  tripleClick(options) {
    return super.tripleClick(processTimeoutOptions(processClickOptions(options)));
  }
  selectOptions(value, options) {
    return super.selectOptions(value, processTimeoutOptions(options));
  }
  clear(options) {
    return super.clear(processTimeoutOptions(options));
  }
  hover(options) {
    return super.hover(processTimeoutOptions(processHoverOptions(options)));
  }
  upload(files, options) {
    return super.upload(files, processTimeoutOptions(options));
  }
  fill(text, options) {
    return super.fill(text, processTimeoutOptions(options));
  }
  dropTo(target, options) {
    return super.dropTo(target, processTimeoutOptions(
      processDragAndDropOptions(options)
    ));
  }
  locator(selector) {
    return new PlaywrightLocator(`${this.selector} >> ${selector}`, this._container);
  }
  elementLocator(element) {
    return new PlaywrightLocator(
      selectorEngine.generateSelectorSimple(element),
      element
    );
  }
}
function processDragAndDropOptions(options_) {
  if (!options_ || !getBrowserState().config.browser.ui) {
    return options_;
  }
  const options = options_;
  if (options.sourcePosition) {
    options.sourcePosition = processPlaywrightPosition(options.sourcePosition);
  }
  if (options.targetPosition) {
    options.targetPosition = processPlaywrightPosition(options.targetPosition);
  }
  return options_;
}
function processHoverOptions(options_) {
  if (!options_ || !getBrowserState().config.browser.ui) {
    return options_;
  }
  const options = options_;
  if (options.position) {
    options.position = processPlaywrightPosition(options.position);
  }
  return options_;
}
function processClickOptions(options_) {
  if (!options_ || !getBrowserState().config.browser.ui) {
    return options_;
  }
  const options = options_;
  if (options.position) {
    options.position = processPlaywrightPosition(options.position);
  }
  return options;
}
function processPlaywrightPosition(position) {
  const scale = getIframeScale();
  if (position.x != null) {
    position.x *= scale;
  }
  if (position.y != null) {
    position.y *= scale;
  }
  return position;
}
